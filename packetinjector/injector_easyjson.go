// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package packetinjector

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonFac7b200DecodeGithubComSkydiveProjectSkydivePacketinjector(in *jlexer.Lexer, out *PacketInjectionRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "SrcIP":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.SrcIP).UnmarshalText(data))
			}
		case "SrcMAC":
			if in.IsNull() {
				in.Skip()
				out.SrcMAC = nil
			} else {
				out.SrcMAC = in.Bytes()
			}
		case "SrcPort":
			out.SrcPort = uint16(in.Uint16())
		case "DstIP":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.DstIP).UnmarshalText(data))
			}
		case "DstMAC":
			if in.IsNull() {
				in.Skip()
				out.DstMAC = nil
			} else {
				out.DstMAC = in.Bytes()
			}
		case "DstPort":
			out.DstPort = uint16(in.Uint16())
		case "Type":
			out.Type = string(in.String())
		case "Count":
			out.Count = uint64(in.Uint64())
		case "ICMPID":
			out.ICMPID = uint16(in.Uint16())
		case "Interval":
			out.Interval = uint64(in.Uint64())
		case "Mode":
			out.Mode = string(in.String())
		case "IncrementPayload":
			out.IncrementPayload = int64(in.Int64())
		case "Payload":
			out.Payload = string(in.String())
		case "Pcap":
			if in.IsNull() {
				in.Skip()
				out.Pcap = nil
			} else {
				out.Pcap = in.Bytes()
			}
		case "TTL":
			out.TTL = uint8(in.Uint8())
		case "UUID":
			out.UUID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFac7b200EncodeGithubComSkydiveProjectSkydivePacketinjector(out *jwriter.Writer, in PacketInjectionRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"SrcIP\":"
		out.RawString(prefix[1:])
		out.RawText((in.SrcIP).MarshalText())
	}
	{
		const prefix string = ",\"SrcMAC\":"
		out.RawString(prefix)
		out.Base64Bytes(in.SrcMAC)
	}
	{
		const prefix string = ",\"SrcPort\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.SrcPort))
	}
	{
		const prefix string = ",\"DstIP\":"
		out.RawString(prefix)
		out.RawText((in.DstIP).MarshalText())
	}
	{
		const prefix string = ",\"DstMAC\":"
		out.RawString(prefix)
		out.Base64Bytes(in.DstMAC)
	}
	{
		const prefix string = ",\"DstPort\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.DstPort))
	}
	{
		const prefix string = ",\"Type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"Count\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Count))
	}
	{
		const prefix string = ",\"ICMPID\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.ICMPID))
	}
	{
		const prefix string = ",\"Interval\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Interval))
	}
	{
		const prefix string = ",\"Mode\":"
		out.RawString(prefix)
		out.String(string(in.Mode))
	}
	{
		const prefix string = ",\"IncrementPayload\":"
		out.RawString(prefix)
		out.Int64(int64(in.IncrementPayload))
	}
	{
		const prefix string = ",\"Payload\":"
		out.RawString(prefix)
		out.String(string(in.Payload))
	}
	{
		const prefix string = ",\"Pcap\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Pcap)
	}
	{
		const prefix string = ",\"TTL\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TTL))
	}
	{
		const prefix string = ",\"UUID\":"
		out.RawString(prefix)
		out.String(string(in.UUID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PacketInjectionRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFac7b200EncodeGithubComSkydiveProjectSkydivePacketinjector(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PacketInjectionRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFac7b200EncodeGithubComSkydiveProjectSkydivePacketinjector(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PacketInjectionRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFac7b200DecodeGithubComSkydiveProjectSkydivePacketinjector(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PacketInjectionRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFac7b200DecodeGithubComSkydiveProjectSkydivePacketinjector(l, v)
}
func easyjsonFac7b200DecodeGithubComSkydiveProjectSkydivePacketinjector1(in *jlexer.Lexer, out *Injections) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Injections, 0, 8)
			} else {
				*out = Injections{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v10 *InjectionMetadata
			if in.IsNull() {
				in.Skip()
				v10 = nil
			} else {
				if v10 == nil {
					v10 = new(InjectionMetadata)
				}
				(*v10).UnmarshalEasyJSON(in)
			}
			*out = append(*out, v10)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFac7b200EncodeGithubComSkydiveProjectSkydivePacketinjector1(out *jwriter.Writer, in Injections) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v11, v12 := range in {
			if v11 > 0 {
				out.RawByte(',')
			}
			if v12 == nil {
				out.RawString("null")
			} else {
				(*v12).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v Injections) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFac7b200EncodeGithubComSkydiveProjectSkydivePacketinjector1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Injections) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFac7b200EncodeGithubComSkydiveProjectSkydivePacketinjector1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Injections) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFac7b200DecodeGithubComSkydiveProjectSkydivePacketinjector1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Injections) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFac7b200DecodeGithubComSkydiveProjectSkydivePacketinjector1(l, v)
}
func easyjsonFac7b200DecodeGithubComSkydiveProjectSkydivePacketinjector2(in *jlexer.Lexer, out *InjectionMetadata) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = string(in.String())
		case "State":
			out.State = string(in.String())
		case "PacketCount":
			out.PacketCount = int64(in.Int64())
		case "SrcIP":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.SrcIP).UnmarshalText(data))
			}
		case "SrcMAC":
			if in.IsNull() {
				in.Skip()
				out.SrcMAC = nil
			} else {
				out.SrcMAC = in.Bytes()
			}
		case "SrcPort":
			out.SrcPort = uint16(in.Uint16())
		case "DstIP":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.DstIP).UnmarshalText(data))
			}
		case "DstMAC":
			if in.IsNull() {
				in.Skip()
				out.DstMAC = nil
			} else {
				out.DstMAC = in.Bytes()
			}
		case "DstPort":
			out.DstPort = uint16(in.Uint16())
		case "Type":
			out.Type = string(in.String())
		case "Count":
			out.Count = uint64(in.Uint64())
		case "ICMPID":
			out.ICMPID = uint16(in.Uint16())
		case "Interval":
			out.Interval = uint64(in.Uint64())
		case "Mode":
			out.Mode = string(in.String())
		case "IncrementPayload":
			out.IncrementPayload = int64(in.Int64())
		case "Payload":
			out.Payload = string(in.String())
		case "Pcap":
			if in.IsNull() {
				in.Skip()
				out.Pcap = nil
			} else {
				out.Pcap = in.Bytes()
			}
		case "TTL":
			out.TTL = uint8(in.Uint8())
		case "UUID":
			out.UUID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFac7b200EncodeGithubComSkydiveProjectSkydivePacketinjector2(out *jwriter.Writer, in InjectionMetadata) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"State\":"
		out.RawString(prefix)
		out.String(string(in.State))
	}
	{
		const prefix string = ",\"PacketCount\":"
		out.RawString(prefix)
		out.Int64(int64(in.PacketCount))
	}
	{
		const prefix string = ",\"SrcIP\":"
		out.RawString(prefix)
		out.RawText((in.SrcIP).MarshalText())
	}
	{
		const prefix string = ",\"SrcMAC\":"
		out.RawString(prefix)
		out.Base64Bytes(in.SrcMAC)
	}
	{
		const prefix string = ",\"SrcPort\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.SrcPort))
	}
	{
		const prefix string = ",\"DstIP\":"
		out.RawString(prefix)
		out.RawText((in.DstIP).MarshalText())
	}
	{
		const prefix string = ",\"DstMAC\":"
		out.RawString(prefix)
		out.Base64Bytes(in.DstMAC)
	}
	{
		const prefix string = ",\"DstPort\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.DstPort))
	}
	{
		const prefix string = ",\"Type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"Count\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Count))
	}
	{
		const prefix string = ",\"ICMPID\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.ICMPID))
	}
	{
		const prefix string = ",\"Interval\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Interval))
	}
	{
		const prefix string = ",\"Mode\":"
		out.RawString(prefix)
		out.String(string(in.Mode))
	}
	{
		const prefix string = ",\"IncrementPayload\":"
		out.RawString(prefix)
		out.Int64(int64(in.IncrementPayload))
	}
	{
		const prefix string = ",\"Payload\":"
		out.RawString(prefix)
		out.String(string(in.Payload))
	}
	{
		const prefix string = ",\"Pcap\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Pcap)
	}
	{
		const prefix string = ",\"TTL\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.TTL))
	}
	{
		const prefix string = ",\"UUID\":"
		out.RawString(prefix)
		out.String(string(in.UUID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InjectionMetadata) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFac7b200EncodeGithubComSkydiveProjectSkydivePacketinjector2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InjectionMetadata) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFac7b200EncodeGithubComSkydiveProjectSkydivePacketinjector2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InjectionMetadata) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFac7b200DecodeGithubComSkydiveProjectSkydivePacketinjector2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InjectionMetadata) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFac7b200DecodeGithubComSkydiveProjectSkydivePacketinjector2(l, v)
}
